					// MakeShared<IntVector>(IntVector{0, 2, 1})
					// MakeShared<IntVector>(IntVector{3, 4, 5})
					// MakeShared<IntVector>(IntVector{0, 3, 5, 2})
					// MakeShared<IntVector>(IntVector{0, 1, 4, 3})
					// MakeShared<IntVector>(IntVector{1, 2, 5, 4})

					// MakeShared<IntVector>(IntVector{0, 3, 2, 1})
					// MakeShared<IntVector>(IntVector{0, 4, 7, 3})
					// MakeShared<IntVector>(IntVector{0, 1, 5, 4})
					// MakeShared<IntVector>(IntVector{4, 5, 6, 7})
					// MakeShared<IntVector>(IntVector{1, 2, 6, 5})
					// MakeShared<IntVector>(IntVector{2, 3, 7, 6})


	// std::ofstream outputFile("ScriptWellGenerator.json");
	// std::stringstream ss;
	// boost::property_tree::json_parser::write_json(ss, propertyTree);
	// outputFile << ss.str();
	// outputFile.close();


RadialGridDataReordered::~RadialGridDataReordered() {
	printf("\n\n");
	printf("\tprisms: %i\n", int(this->prisms.size()));
	printf("\thexahedra: %i\n", int(this->hexahedra.size()));
	printf("\tvertices: %i\n", int(this->vertices.size()));
	printf("\tcoordinates: %i\n", int(this->coordinates.size()));
}

	for (auto i = 0; i < 37; i++) {
		bool x = std::abs(reordered->coordinates[i][0] -reordered->coordinates[37 + i][0]) < 1e-2;
		bool y = std::abs(reordered->coordinates[i][1] -reordered->coordinates[37 + i][1]) < 1e-2;

		std::cout << std::setprecision(5) << std::scientific << "\t\t";

		if (x)
			std::cout << std::setfill(' ') << std::setw(12) << std::right << reordered->coordinates[i][0];
		else
			std::cout << std::setfill(' ') << std::setw(12) << std::right << "\033[1;31m" << reordered->coordinates[i][0] << "\033[0m";

		if (y)
			std::cout << std::setfill(' ') << std::setw(12) << std::right << reordered->coordinates[i][1];
		else
			std::cout << std::setfill(' ') << std::setw(12) << std::right << "\033[1;31m" << reordered->coordinates[i][1] << "\033[0m";

		std::cout << std::setfill(' ') << std::setw(12) << std::right << reordered->coordinates[i][2];


		std::cout << std::setprecision(5) << std::scientific << "\t\t";

		if (x)
			std::cout << std::setfill(' ') << std::setw(12) << std::right << reordered->coordinates[37+i][0];
		else
			std::cout << std::setfill(' ') << std::setw(12) << std::right << "\033[1;31m" << reordered->coordinates[37+i][0] << "\033[0m";

		if (y)
			std::cout << std::setfill(' ') << std::setw(12) << std::right << reordered->coordinates[37+i][1];
		else
			std::cout << std::setfill(' ') << std::setw(12) << std::right << "\033[1;31m" << reordered->coordinates[37+i][1] << "\033[0m";

		std::cout << std::setfill(' ') << std::setw(12) << std::right << reordered->coordinates[37+i][2];

		std::cout << std::endl;
	}


		// std::cout << "\tsegment \033[1;31m" << s << "\033[0m: " << this->reordered->lineConnectivity[s][0] << " - " << this->reordered->lineConnectivity[s][1] << std::endl;

		// printf("\n\t\tprismIndices (%i): ", int(this->reordered->prismConnectivity.size() / (s+1)));
		// for (int i = 0; i < this->numberOfPrismsPerSegment; i++)
		// 	std::cout << this->reordered->prismConnectivity[s*this->numberOfPrismsPerSegment+i].back() << ", ";;

		// printf("\n\t\thexahIndices (%i): ", int(this->reordered->hexahedronConnectivity.size() / (s+1)));
		// for (int i = 0; i < this->numberOfHexahedronsPerSegment; i++)
		// 	std::cout << this->reordered->hexahedronConnectivity[s*this->numberOfHexahedronsPerSegment+i].back() << ", ";

		// printf("\n\n");

	for (int i = 0; i < 24; i++) {
		std::cout << "\t";
		for (auto v : reordered->hexahedronConnectivity[i])
			std::cout << "\t" << v;
		std::cout << std::endl;
	}

	std::cout << std::endl;

	for (int i = 0; i < 12; i++) {
		std::cout << "\t";
		for (auto v : reordered->prismConnectivity[i])
			std::cout << "\t" << v;
		std::cout << std::endl;
	}

	std::cout << std::endl;

	for (int i = 0; i < 9; i++) {
		std::cout << "\t";
		for (auto v : reordered->lineConnectivity[i])
			std::cout << "\t" << v;
		std::cout << std::endl;
	}

	std::cout << std::endl;

	for (int i = 0; i < 37; i++) {
		std::cout << "\t";
		for (auto v : reordered->coordinates[i])
			std::cout << "\t" << std::scientific << std::setprecision(16) << v;
		std::cout << std::endl;
	}

	std::cout << std::endl;

	for (int i = 37; i < 74; i++) {
		std::cout << "\t";
		for (auto v : reordered->coordinates[i])
			std::cout << "\t" << std::scientific << std::setprecision(16) << v;
		std::cout << std::endl;
	}

	std::cout << std::endl;

	for (int i = 74; i < 111; i++) {
		std::cout << "\t";
		for (auto v : reordered->coordinates[i])
			std::cout << "\t" << std::scientific << std::setprecision(16) << v;
		std::cout << std::endl;
	}

	std::cout << std::endl;

	for (int i = 333; i < 370; i++) {
		std::cout << "\t";
		for (auto v : reordered->coordinates[i])
			std::cout << "\t" << std::scientific << std::setprecision(16) << v;
		std::cout << std::endl;
	}

	std::cout << std::endl;